{"ast":null,"code":"var _jsxFileName = \"D:\\\\movie_trailer\\\\movie-watching\\\\src\\\\components\\\\movie-grid\\\\MovieGrid.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useHistory, useParams } from 'react-router';\nimport tmdbApi, { category, movieType, tvType } from '../../api/tmdbApi';\nimport './movie-grid.scss';\nimport MovieCard from '../movie-card/MovieCard';\nimport Button, { OutlineButton } from '../button/Button';\nimport Input from '../input/Input';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MovieGrid = props => {\n  _s();\n  const [items, setItems] = useState([]);\n  const [page, setPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(0);\n  const {\n    keyword\n  } = useParams();\n  useEffect(() => {\n    const getList = async () => {\n      let response = null;\n      if (keyword === undefined) {\n        const params = {};\n        switch (props.category) {\n          case category.movie:\n            response = await tmdbApi.getMoviesList(movieType.upcoming, {\n              params\n            });\n            break;\n          default:\n            response = await tmdbApi.getTvList(tvType.popular, {\n              params\n            });\n        }\n      } else {\n        const params = {\n          query: keyword\n        };\n        response = await tmdbApi.search(props.category, {\n          params\n        });\n      }\n      setItems(response.results);\n      setTotalPage(response.total_pages);\n    };\n    getList();\n  }, [props.category, keyword]);\n  const loadMore = async () => {\n    let response = null;\n    if (keyword === undefined) {\n      const params = {\n        page: page + 1\n      };\n      switch (props.category) {\n        case category.movie:\n          response = await tmdbApi.getMoviesList(movieType.upcoming, {\n            params\n          });\n          break;\n        default:\n          response = await tmdbApi.getTvList(tvType.popular, {\n            params\n          });\n      }\n    } else {\n      const params = {\n        page: page + 1,\n        query: keyword\n      };\n      response = await tmdbApi.search(props.category, {\n        params\n      });\n    }\n    setItems([...items, ...response.results]);\n    setTotalPage(page + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section mb-3\",\n      children: /*#__PURE__*/_jsxDEV(MovieSearch, {\n        category: props.category,\n        keyword: keyword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-grid\",\n      children: items.map((item, i) => /*#__PURE__*/_jsxDEV(MovieCard, {\n        category: props.category,\n        item: item\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 44\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), page < totalPage ? /*#__PURE__*/_jsxDEV(OutlineButton, {\n      className: \"small\",\n      onClick: loadMore,\n      children: \"T\\u1EA3i th\\xEAm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }, this) : null]\n  }, void 0, true);\n};\n_s(MovieGrid, \"gVKJykNS0ZZmAcVWR7yk7gRUMnQ=\", false, function () {\n  return [useParams];\n});\n_c = MovieGrid;\nconst MovieSearch = props => {\n  _s2();\n  const history = useHistory();\n  const [keyword, setKeyword] = useState(props.keyword ? props.keyword : '');\n  const goToSearch = useCallback(() => {\n    if (keyword.trim().length > 0) {\n      history.push(`${category[props.category]}/search/${keyword}`);\n    }\n  }, [keyword, props.category, history]);\n  useEffect(() => {\n    const enterEvent = e => {\n      e.preventDefault();\n      if (e.keyCode === 13) {\n        goToSearch();\n      }\n    };\n    document.addEventListener('keyup', enterEvent);\n    return () => {\n      document.removeEventListener('keyup', enterEvent);\n    };\n  }, [keyword, goToSearch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-search\",\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      type: \"text\",\n      placeholder: \"Nh\\u1EADp t\\u1EEB kho\\xE1\",\n      value: keyword,\n      onChange: e => setKeyword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"small\",\n      onClick: goToSearch,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n};\n_s2(MovieSearch, \"I2NExLrNnOoAB+SPN4V+sg7kpxQ=\", false, function () {\n  return [useHistory];\n});\n_c2 = MovieSearch;\nexport default MovieGrid;\nvar _c, _c2;\n$RefreshReg$(_c, \"MovieGrid\");\n$RefreshReg$(_c2, \"MovieSearch\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useHistory","useParams","tmdbApi","category","movieType","tvType","MovieCard","Button","OutlineButton","Input","jsxDEV","_jsxDEV","Fragment","_Fragment","MovieGrid","props","_s","items","setItems","page","setPage","totalPage","setTotalPage","keyword","getList","response","undefined","params","movie","getMoviesList","upcoming","getTvList","popular","query","search","results","total_pages","loadMore","children","className","MovieSearch","fileName","_jsxFileName","lineNumber","columnNumber","map","item","i","onClick","_c","_s2","history","setKeyword","goToSearch","trim","length","push","enterEvent","e","preventDefault","keyCode","document","addEventListener","removeEventListener","type","placeholder","value","onChange","target","_c2","$RefreshReg$"],"sources":["D:/movie_trailer/movie-watching/src/components/movie-grid/MovieGrid.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport tmdbApi, { category, movieType, tvType } from '../../api/tmdbApi';\r\nimport './movie-grid.scss';\r\nimport MovieCard from '../movie-card/MovieCard';\r\nimport Button, { OutlineButton } from '../button/Button';\r\nimport Input from '../input/Input';\r\n\r\nconst MovieGrid = props => {\r\n\r\n    const [items, setItems] = useState([]);\r\n    const [page, setPage] = useState(1);\r\n    const [totalPage, setTotalPage] = useState(0);\r\n\r\n    const { keyword } = useParams();\r\n\r\n    useEffect(() => {\r\n        const getList = async () => {\r\n            let response = null;\r\n\r\n            if (keyword === undefined) {\r\n                const params = {};\r\n                switch (props.category) {\r\n                    case category.movie:\r\n                        response = await tmdbApi.getMoviesList(movieType.upcoming, { params });\r\n                        break;\r\n                    default:\r\n                        response = await tmdbApi.getTvList(tvType.popular, { params });\r\n                }\r\n            } else {\r\n                const params = {\r\n                    query: keyword\r\n                }\r\n                response = await tmdbApi.search(props.category, { params });\r\n            }\r\n            setItems(response.results);\r\n            setTotalPage(response.total_pages);\r\n        }\r\n        getList();\r\n    }, [props.category, keyword]);\r\n\r\n    const loadMore = async () => {\r\n        let response = null;\r\n        if (keyword === undefined) {\r\n            const params = {\r\n                page: page + 1\r\n            };\r\n            switch (props.category) {\r\n                case category.movie:\r\n                    response = await tmdbApi.getMoviesList(movieType.upcoming, { params });\r\n                    break;\r\n                default:\r\n                    response = await tmdbApi.getTvList(tvType.popular, { params });\r\n            }\r\n        } else {\r\n            const params = {\r\n                page: page + 1,\r\n                query: keyword\r\n            }\r\n            response = await tmdbApi.search(props.category, { params });\r\n        }\r\n        setItems([...items, ...response.results]);\r\n        setTotalPage(page + 1);\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"section mb-3\">\r\n                <MovieSearch category={props.category} keyword={keyword}/>\r\n            </div>\r\n            <div className=\"movie-grid\">\r\n                {\r\n                    items.map((item, i) => <MovieCard category={props.category} item={item} key={i} />)\r\n                }\r\n            </div>\r\n            {page < totalPage ? (\r\n                <OutlineButton className=\"small\" onClick={loadMore}>\r\n                    Tải thêm\r\n                </OutlineButton>\r\n            ) : null}\r\n        </>\r\n    );\r\n}\r\n\r\nconst MovieSearch = props => {\r\n\r\n    const history = useHistory();\r\n\r\n    const [keyword, setKeyword] = useState(props.keyword ? props.keyword : '');\r\n\r\n    const goToSearch = useCallback(\r\n        () => {\r\n            if (keyword.trim().length > 0){\r\n                history.push(`${category[props.category]}/search/${keyword}`);\r\n            }\r\n        },\r\n        [keyword, props.category, history]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const enterEvent = (e) => {\r\n            e.preventDefault();\r\n            if(e.keyCode === 13){\r\n                goToSearch();\r\n            }\r\n        }\r\n        document.addEventListener('keyup', enterEvent);\r\n        \r\n        return () => {\r\n            document.removeEventListener('keyup', enterEvent);\r\n        }\r\n    }, [keyword, goToSearch]);\r\n\r\n    return (\r\n        <div className=\"movie-search\">\r\n            <Input\r\n                type=\"text\"\r\n                placeholder=\"Nhập từ khoá\"\r\n                value={keyword}\r\n                onChange={(e) => setKeyword(e.target.value)}\r\n            />\r\n            <Button className=\"small\" onClick={goToSearch}>Search</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MovieGrid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}